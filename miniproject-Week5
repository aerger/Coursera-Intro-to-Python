#
# Implementation of classic arcade game Pong
#
# October 2014
#

# imports
import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
score1 = 0
score2 = 0
ball_pos = [0,0]
ball_vel = [0,0]
paddle1_vel = 0
paddle2_vel = 0
paddle1_pos = 0
paddle2_pos = 0
# (that's a lot of globals, yeesh)

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2,HEIGHT/2]
    
    # negate the velocity to switch directions, left <-> right
    ball_vel[0] = (random.randrange(240, 360)/60.0)
    if direction == LEFT:
        ball_vel[0] = -ball_vel[0]
        
    # Y direction is always negative to spawn (upwards direction)
    # according to the project description
    ball_vel[1] = -(random.randrange(120, 240)/60.0)

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    global ball_vel
    
    # reset scores and paddle data
    score1 = 0
    score2 = 0
    paddle1_vel = 0
    paddle2_vel = 0
    ball_vel = [0,0]
    paddle1_pos = HEIGHT / 2
    paddle2_pos = HEIGHT / 2
    
    # start the game with a new ball
    spawn.start()
    spawn_ball(random.choice([RIGHT,LEFT]))
    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    if not(spawn.is_running()):
        # update ball
        # check for horizontal bounds (gutters, paddles)
        if (ball_pos[0] + ball_vel[0]) >= (WIDTH - BALL_RADIUS - PAD_WIDTH - 1):
            # are we bumping into the right paddle -- take action if so
            if (paddle2_pos + HALF_PAD_HEIGHT >= ball_pos[1] >= paddle2_pos - HALF_PAD_HEIGHT):
                ball_vel[0] = -ball_vel[0]   
                ball_vel[0] *= 1.1
                ball_vel[1] *= 1.1
            else:
                score1 += 1
                spawn_ball(LEFT)
        elif (ball_pos[0] + ball_vel[0]) <= (BALL_RADIUS + PAD_WIDTH):
            # are we bumping into the left paddle -- take action if so
            if (paddle1_pos + HALF_PAD_HEIGHT >= ball_pos[1] >= paddle1_pos - HALF_PAD_HEIGHT):
                ball_vel[0] = -ball_vel[0]
                ball_vel[0] *= 1.1
                ball_vel[1] *= 1.1
            else:
                score2 += 1
                spawn_ball(RIGHT)
        else:
            ball_pos[0] += ball_vel[0]
            
        # check for vertical bounds (top/bottom)
        if (ball_pos[1] + ball_vel[1]) >= (HEIGHT - BALL_RADIUS - 1):
            ball_pos[1] = HEIGHT - BALL_RADIUS - 1
            ball_vel[1] = - ball_vel[1]
        elif (ball_pos[1] + ball_vel[1]) <= (BALL_RADIUS):
            ball_pos[1] = BALL_RADIUS
            ball_vel[1] = - ball_vel[1]
        else:    
            ball_pos[1] += ball_vel[1]
    
        # draw ball (and if you uncomment a few lines, a ball face, haha)
        canvas.draw_circle([ball_pos[0],ball_pos[1]],BALL_RADIUS,2,'Yellow','Yellow')
        canvas.draw_circle([ball_pos[0] - BALL_RADIUS/2, ball_pos[1] - BALL_RADIUS/3], 6, 2,'Black','White')
        canvas.draw_circle([ball_pos[0] + BALL_RADIUS/2, ball_pos[1] - BALL_RADIUS/3], 6, 2,'Black','White')
        canvas.draw_circle([ball_pos[0] - BALL_RADIUS/2, ball_pos[1] - BALL_RADIUS/3], 1, 1, 'Black','Black')
        canvas.draw_circle([ball_pos[0] + BALL_RADIUS/2, ball_pos[1] - BALL_RADIUS/3], 1, 1, 'Black','Black')
        canvas.draw_circle([ball_pos[0], ball_pos[1] + BALL_RADIUS/2], 6, 2, 'Red','Black') 
        
    else:
        canvas.draw_text('Get ready...', 
                         [(WIDTH - frame.get_canvas_textwidth('Get ready...',36,'monospace'))/2, 
                          HEIGHT/2],36,'White', 'monospace')
    
    # update paddle's vertical position, keep paddle on the screen
    # paddle1 (left)
    if paddle1_pos + paddle1_vel >= HEIGHT - HALF_PAD_HEIGHT - 1:
        paddle1_pos = HEIGHT - HALF_PAD_HEIGHT
    elif paddle1_pos + paddle1_vel <= HALF_PAD_HEIGHT:
        paddle1_pos = HALF_PAD_HEIGHT
    else:
        paddle1_pos += paddle1_vel
        
    # paddle2 (right)
    if paddle2_pos + paddle2_vel >= HEIGHT - HALF_PAD_HEIGHT - 1:
        paddle2_pos = HEIGHT - HALF_PAD_HEIGHT
    elif paddle2_pos + paddle2_vel <= HALF_PAD_HEIGHT:
        paddle2_pos = HALF_PAD_HEIGHT
    else:
        paddle2_pos += paddle2_vel
    
    # draw paddles
    # paddle1 (left)
    canvas.draw_line([PAD_WIDTH - HALF_PAD_WIDTH - 1, paddle1_pos - HALF_PAD_HEIGHT], 
                     [PAD_WIDTH - HALF_PAD_WIDTH - 1, paddle1_pos + HALF_PAD_HEIGHT],
                     PAD_WIDTH, 'White')
    # paddle2 (right)
    canvas.draw_line([WIDTH - PAD_WIDTH + HALF_PAD_WIDTH + 1, paddle2_pos - HALF_PAD_HEIGHT], 
                     [WIDTH - PAD_WIDTH + HALF_PAD_WIDTH + 1, paddle2_pos + HALF_PAD_HEIGHT],
                     PAD_WIDTH, 'White')
    
    # draw scores
    canvas.draw_text(str(score1).rjust(2, '0'), (PAD_WIDTH + 10, 40), 36, 'White', 'monospace')
    canvas.draw_text(str(score2).rjust(2, '0'), (WIDTH - PAD_WIDTH - 50, 40), 36, 'White', 'monospace')
             
def keydown(key):
    global paddle1_vel, paddle2_vel

    #paddle1 (left)
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel += 5
    elif key == simplegui.KEY_MAP['w']:
        paddle1_vel -= 5
    
    #paddle2 (right)
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel += 5
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel -= 5
    
def keyup(key):
    global paddle1_vel, paddle2_vel

    # paddle1 (left)
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP['w']:
        paddle1_vel = 0
    
    # paddle2 (right)
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel = 0

def spawner():
    spawn.stop()
        
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_canvas_background('#505050')
frame.add_button('Restart', new_game)
spawn = simplegui.create_timer(2000, spawner)

#handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)

# start frame
new_game()
frame.start()
